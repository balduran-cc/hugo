<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>developer on 說故事給你聽</title>
    <link>https://hugo.balduran.cc/categories/developer/</link>
    <description>Recent content in developer on 說故事給你聽</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 11 Dec 2017 23:13:00 +0000</lastBuildDate>
    
	<atom:link href="https://hugo.balduran.cc/categories/developer/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>使用 homebrew 快速建立環境</title>
      <link>https://hugo.balduran.cc/post/use-brewfile/</link>
      <pubDate>Mon, 11 Dec 2017 23:13:00 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/use-brewfile/</guid>
      <description>使用 homebrew 至少也有四五年，真的是 mac 上套件管理的好工具，現在連應用程式都可以幫你裝，大幅減少因為換機而需要建立環境的時間。
現在學到一個新招是使用 Brewfile 一次大量安裝自己需要的套件，概念就跟 npm install 一樣。
這是我自己的 Brewfile，只要安裝好 homebrew，再輸入brew bundle install就會依序安裝。
其中我也使用了 mas-cli，用來安裝 Mac App store上的程式。</description>
    </item>
    
    <item>
      <title>search.json.mozlz4</title>
      <link>https://hugo.balduran.cc/post/search-json-mozlz4/</link>
      <pubDate>Tue, 27 Jun 2017 09:53:09 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/search-json-mozlz4/</guid>
      <description>Firefox 從 FF45 開始，不再使用 searchplugins folder，改用 search.json.mozlz4 這個檔案。讀取這個檔案是有點麻煩的，原因是這個檔案並不是一般的 LZ4 壓縮檔，它是 Mozilla 客製化的版本。
Mozilla 客製化的方法就是在header加入幾個 Magic Number， 這個 Magic Number 就是 mozLz4a\0，去掉這些字元之後才是正常的 LZ4 格式。
估計這樣的設計，是不要讓其他程式可以讀取 Firefox的設定，而這個非標準格式，也有 ticket 在討論。
reference: LZ4.js</description>
    </item>
    
    <item>
      <title>Mount remote FS over SSH</title>
      <link>https://hugo.balduran.cc/post/mount-remote-fs-over-ssh/</link>
      <pubDate>Mon, 19 Jun 2017 01:43:28 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/mount-remote-fs-over-ssh/</guid>
      <description>工作的場合中常常會需要編輯的檔案，如果是老派的程式猿，會告訴你用 VIM，我以前也是這麼想，不過現在越來越喜歡用單純的編輯器編輯本地端的檔案。
本地端的檔案和遠端伺服器之間就一定需要有同步的機制。
SFTP 有一種做法是直接使用 FTP 軟體瀏覽遠端檔案結構，設定對應的編輯軟體，讓 FTP 軟體幫你傳送到遠端，例如 cyberduck的功能介紹裡所說的 Edit any file with your preferred editor
Mount SSHFS 還有一種做法是將遠端伺服器 mount 到自己本地目錄下。付費軟體有 mountainduck，免費軟體有 macfusion2。
如果是 CMD 控可能會想要打打指令，安裝 sshfs是一定要的。Mac上則是用 osxfuse，安裝完後還要自己下 mount 指令。
 sudo mkdir /mnt/myfolder myfolder 自訂，先開個目錄等等 mount用 sudo sshfs -o allow_other,defer_permissions,IdentityFile=~/.ssh/id_rsa username@xxx.xxx.xxx.xxx:/ /mnt/myfolder 這樣就會用 id_rsa 去連到 xxx.xxx.xxx.xxx，並把遠端的home掛到 myfolder sudo umount /mnt/myfolder 不需要的時候把它移掉  不知道是不是錯覺，有時候感覺 finder 在看 sshfs目錄的時候會很頓。
Rsync over SSH 另外一個方式是直接 Rsync，rsync -avz -e ssh SRC DEST&amp;quot;，如果很在意安全性的話，可以特別做個 ssh key出來，用-e &amp;quot;ssh -i ssh_key&amp;quot;去執行。</description>
    </item>
    
    <item>
      <title>home-brew 1.0.0</title>
      <link>https://hugo.balduran.cc/post/home-brew-1-0-0/</link>
      <pubDate>Mon, 26 Sep 2016 02:54:11 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/home-brew-1-0-0/</guid>
      <description>http://brew.sh/2016/09/21/homebrew-1.0.0/
Mac 上面很好用的套件管理程式 homebrew 已經發佈 1.0.0版。
一些改變如
 套件一律安裝到 /usr/local/Homebrew cask 整合 auto-update brew update 加速  更新的方法很簡單，只要 brew update + brew upgrade就可以了喔</description>
    </item>
    
    <item>
      <title>php codes analyze tools</title>
      <link>https://hugo.balduran.cc/post/php-codes-analyze-tools/</link>
      <pubDate>Tue, 20 Sep 2016 01:41:15 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/php-codes-analyze-tools/</guid>
      <description>PHP 程式檢測工具
 php -l xxx.php 最簡單，僅檢查 syntax PHPSA phar或composer安裝，靜態檢查工具 PHP_CodeSniffer phpcs，曾經存在過 PHPMD 一樣 phar或composer安裝，仿自 java 的 PMD  </description>
    </item>
    
    <item>
      <title>bash_profile and bashrc</title>
      <link>https://hugo.balduran.cc/post/bash_profile-and-bashrc/</link>
      <pubDate>Tue, 19 Apr 2016 04:10:08 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/bash_profile-and-bashrc/</guid>
      <description>##bash_profile 和 bashrc 的差別
對很多程式人員來說，剛接觸到 Linux (or Mac)，打開 commandline，第一個學的就是 bash(shell)，也往往會 copy 別人的 bashrc來使用。
但不多人知道 bashrc and bash_profile 的差別。
GNU 上的 Bash manual 倒是說得很清楚，差別就在於 interactive shells。
##interactive shells 最簡單的判別方式就是，你敲入一個指令，然後終端機回給你結果，這個時候你就是處在一個 interactive shells。這時候輸入 echo $-，執行結果有 i 代表目前正在一個 interactive shells。
##non-interactive shells 那什麼是 non-interactive shells ?? shell script 在執行的時候，就是一個 non-interactive shells，這時shell script 處理邏輯並依序執行完，$-變數不會有i
當 bash 是以 interactive login shells 執行的時候，也就是最普遍的 ssh hostname的時候，他會依序讀取
 /etc/profile ~/.bash_profile ~/.bash_login ~/.profile，  .profile檔是一開始 sh 的命名，.bash_profile 是為了相容又有所區別
如果已經登入一台機器了，這時候再打一次 bash，這時候還是 interactive shells，但這時已經不是 login shell(不用打密碼了這次)，這時候讀取的設定檔就是</description>
    </item>
    
    <item>
      <title>Visual Studio Code 1.0 release</title>
      <link>https://hugo.balduran.cc/post/visual-studio-code-1-0-release/</link>
      <pubDate>Thu, 14 Apr 2016 23:25:17 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/visual-studio-code-1-0-release/</guid>
      <description>Visual Studio Code 1.0 release
Visual Studio Code 是微軟近年來改變策略之後放出的免費編輯器，不同於傳統的 Visual Studio，Visual Studio Code 是基於 Electron上所寫成的應用程式，使用了 Javscript and Nodejs 等等的 Web 技術，最一開始，是為了方便寫 javascript and typescript 而生。
如果要簡單一點想，和 Atom 相差無幾，而且也有廣大的 extensions 可以安裝。</description>
    </item>
    
    <item>
      <title>rbenv on mac</title>
      <link>https://hugo.balduran.cc/post/rbenv-on-mac/</link>
      <pubDate>Tue, 05 May 2015 04:37:15 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/rbenv-on-mac/</guid>
      <description>gem install xxxyyy 大概是要在mac安裝些軟體時候會需要做的動作，安裝相依性套件，但是！！ 升級到 10.10 mac很容易跑出這樣的錯誤給你看。
 ERROR: While executing gem &amp;hellip; (Gem::FilePermissionError) You don&amp;rsquo;t have write permissions for the /Library/Ruby/Gems/2.0.0 directory.
 意思是/Library/Ruby/Gems/2.0.0無權限寫入，當然啦！這是root所有的目錄，通常一般人也就用sudo gem install xxxyyy來解決，但這並不是一個很好的方法。
建議用 rbenv來管理ruby的環境，隔離系統內建的ruby(2.0)與開發時候所使用的版本，開發的環境往往需要新舊共存，這樣就不會污染到系統內建的函式庫。
而 rbenv又可以由 brew 來管理，使用 brew 來安裝 rbenv，然後使用 rbenv 來管理 ruby 開發環境 。
brew install rbenv ruby-build #記得安裝完後要將`eval &amp;quot;$(rbenv init -)&amp;quot;` 加入到 bash_profile rbenv install -l 可以查看可供下載的ruby版本
rbenv install 2.0.0-p247 install 2.0.0-p247
rbenv versions list all installed version
rbenv global 2.0.0-p247 設定 2.</description>
    </item>
    
    <item>
      <title>build python environment on MAC</title>
      <link>https://hugo.balduran.cc/post/temp-slug-880/</link>
      <pubDate>Mon, 23 Mar 2015 10:04:31 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/temp-slug-880/</guid>
      <description>用 homebrew 安裝 python
brew instal python
  setuptools &amp;amp; pip was installed by homebrew ，但我們需要更新一下
pip install –upgrade setuptools
pip install –upgrade pip
  build link in Application folder
brew linkapps 會在application下產生兩個link, IDLE.app and python launcher.app
  安裝virtualenv pip install virtualenv
  使用 virtualenv
virtualenv first
source first/bin/activate
這時就已經啟用了first 這個虛擬環境
pip install markdown
會在這個環境內安裝 markdown
deactivate會退出這個環境
  Extra reading: https://github.com/Homebrew/homebrew/wiki/Homebrew-and-Python</description>
    </item>
    
    <item>
      <title>several useful git tips</title>
      <link>https://hugo.balduran.cc/post/several-useful-git-tips/</link>
      <pubDate>Sun, 15 Mar 2015 20:38:01 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/several-useful-git-tips/</guid>
      <description>需要從別人的branch延伸功能
git checkout -b featureA –track remote/featureA  或是設定upstream為remote branch
 git v1.7 可用  git br –set-upstream feature origin/featureA  git v1.8 有更直覺的語法  git br –set-upstream-to origin/featureA git br -u origin/featureA   push branch 之前精簡曾有的commit log
gire rebase -i HEAD~5
精簡五個commit
  將本地端 branch featureA推到遠端
git push origin featureA
  刪除github上的已存在的branch
git push remote :featureA
git branch -d -r remote/featureA
  revert 前一個commit</description>
    </item>
    
    <item>
      <title>Edit remote files on another UNIX-like server</title>
      <link>https://hugo.balduran.cc/post/edit-remote-files-on-another-unix-like-server/</link>
      <pubDate>Thu, 13 Mar 2014 11:56:00 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/edit-remote-files-on-another-unix-like-server/</guid>
      <description>做開發工作，處理的系統一旦龐大，往往會蓋自己的開發機器，而不是用本機（不論是Mac, linux or Windows）建立伺服器，原因往往跟套件管理，機器權限管理有關。
大公司都有自己 inhouse 的套件管理，登入機器的權限管理與使用者管理也自有一套系統。想要用原生的 Mac建成類似的系統並且接上各個後端，是吃力不討好。
有些硬派開發者會標榜使用 Vim 無敵，當然這也是一個選項，但是我自己會儘量嘗試各種 IDE或 editor。
想要在本機編輯完程式檔案之後，直接使用開發機器驗證，有幾種方式。
  Aptana
免費版本的就可以直接設定SFTP存取，即時把檔案拉下來編輯的做法。
  sublime with sftp plugin
sublime 也是很方便的編輯器，但是只能編輯本地端檔案，折衷的方式安裝sftp plugin，設定local folder 和 remote folder sync，同時開啟 upload_on_save選項，可以保證在每次存檔的時候就上傳到開發機。
  Mount NFS
直接開發機的目錄掛到本機，並使用自己熟悉的編輯器修改。其中mount的方式也有各種不同。
a. finder mount
finder-&amp;gt;go-&amp;gt;connect to server(cmd+K) 有點麻煩 常常需要重新掛，下shell command的話異常慢。更正：登入後自動掛載
b. MacFusion
MacFusion 是 MacFuse 的圖形化界面，特定版本搭配才ＯＫ，但我忘了是哪些版本。更新：根據fuse for OS X，MacFuse 已經停止維護。wiki頁面有詳細說明。Note for Mountain Lion
  Rsync
寫成bash command，用automator跑或是 Alfred workflow(需付費）執行。
  </description>
    </item>
    
    <item>
      <title>use homebrew on mac</title>
      <link>https://hugo.balduran.cc/post/use-homebrew-on-mac/</link>
      <pubDate>Sat, 30 Mar 2013 04:34:00 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/use-homebrew-on-mac/</guid>
      <description>homebrew 是 MAC 平台上普遍使用的 package management system. 同類型的工具還有 apt &amp;amp; yum
安裝 homebrew 很簡單，只要在 terminal 輸入 ruby -e “$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)” 安裝完成就可以使用以下指令
 brew install 安裝套件 brew uninstall 移除套件 brew search [foo] 安裝之前先搜尋一下 brew list 列出已安裝套件 brew update 更新已安裝套件 brew upgrade 升級 homebrew  可能遇到的疑難雜症有
 xcode 非最新版 安裝新版即可。   Warning: Your compilers are different from the standard versions for your Xcode. If you have Xcode 4.3 or newer, you should install the Command Line Tools for Xcode from within Xcode’s Download preferences.</description>
    </item>
    
    <item>
      <title>google developer day 2008 taiwan resource</title>
      <link>https://hugo.balduran.cc/post/google-developer-day-2008-taiwan-resource/</link>
      <pubDate>Tue, 08 Jul 2008 20:00:11 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/google-developer-day-2008-taiwan-resource/</guid>
      <description>Slice: Google 2008 台北程式開發日 (Google Developer Day 2008 Taiwan)
Video: YouTube – GoogleDevelopersZHTW 的頻道
Album: Picasa Web Albums – Developer Day – Developer Day…
app engine code sample: google-app-engine-codelab – Google Code</description>
    </item>
    
    <item>
      <title>Google Developer Day</title>
      <link>https://hugo.balduran.cc/post/google-developer-day/</link>
      <pubDate>Fri, 25 Apr 2008 17:48:07 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/google-developer-day/</guid>
      <description>又是一個慢消息。
Google Developer Day 08年的預計舉辦的地點，台灣已經確定在 6/14 台北舉行，至於規模，未知。
以現在公布的訊息來看，技術主題都圍繞在 google 主打的題目上，cloud computing, google gears, Maps, Androids, Gadgets, OpenSocial 都是很熱門的主題。講者也都很強的樣子 (廢話，只有強者才能進去吧)。
目前還不知道人數限制，而且以去年秋冬時後辦的 developer days 的報名情況來看，應該也是狂多人報名的，只是篩選機制就不知道了。報名的時候有選項可以填入自己開發過的專案，也許有經驗能和分享是一項優勢，尤其現在國內也不乏有人開發出不錯的網站。</description>
    </item>
    
    <item>
      <title>Facebook 網路小聚</title>
      <link>https://hugo.balduran.cc/post/facebook-developer-garage/</link>
      <pubDate>Tue, 11 Dec 2007 16:12:18 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/facebook-developer-garage/</guid>
      <description>kijiji上的廣告
時間是這禮拜六 (12/15) 的下午，透過視訊會議的方式進開場，並有現場 Demo，對於開發人員應該是個不錯玩的場合。
在 facebook 上有帳號的人可以直接看 facebook.com/event
也許在 facebook 上就足以串起一票人。
同場上映的還有 陽光宅男 » funParty !</description>
    </item>
    
    <item>
      <title>SSH tunnels</title>
      <link>https://hugo.balduran.cc/post/ssh-tunnels/</link>
      <pubDate>Fri, 05 Oct 2007 06:30:55 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/ssh-tunnels/</guid>
      <description>同事 Kcc教了我從家中電腦遠端連進辦公室電腦的方法，不是用VPN，是用SSH進入院內一台主機，在forward到我使用的電腦，然後用windows內建的遠端桌面連線。
SSH Tunnel我之前沒接觸過，一直想了解三台機器的關係，似乎是本機的 Source port經由和 Host的 SSH連線連到 destination，以遠端桌面為例 destination的 port是3189，Source port是自訂，在開啟遠端桌面連線時候鍵入 127.0.0.1:source port就可。
如果我早一點知道這一招就好了，之前在環保局都是用 port 443連線，不過前提是要有一台 SSH Server可以連線。
由http暗藏通道看網路安全、FreeBSD GIF Tunnel講的是不是同一件事情呢？
Msn: 1080 dynamic勾選，destination空白
IE: 8080 destination:192.168.0.1:3180(??)
OE: Source: 25(smtp),110(pop3)</description>
    </item>
    
  </channel>
</rss>