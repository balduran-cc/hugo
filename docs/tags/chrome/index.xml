<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>chrome on 說故事給你聽</title>
    <link>https://hugo.balduran.cc/tags/chrome/</link>
    <description>Recent content in chrome on 說故事給你聽</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 04 Jul 2018 23:10:52 +0000</lastBuildDate>
    
	<atom:link href="https://hugo.balduran.cc/tags/chrome/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>extension sidebar UI</title>
      <link>https://hugo.balduran.cc/post/extension-sidebar-ui/</link>
      <pubDate>Wed, 04 Jul 2018 23:10:52 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/extension-sidebar-ui/</guid>
      <description>有開發過 Firefox addon的開發人員應該知道有一種 side bar UI會佔滿瀏覽器的左邊，通常對於一些 debugging tool來說這樣的介面很有幫助，可以一邊看頁面一邊看想要偵錯的資訊。
不過這樣的 UI 在 Chrome 是不存在的。
最最最最接近的是 devtools panels，不過非程式開發人員一般來說是不會打開 devTools的。
這份文件 指出了在 2015的時候，chromium project (chrome的開源計畫) 曾有過討論要加入 sidebar UI，但後來被標為 won&amp;rsquo;t fix，也就無望了。如果 Sidebar UI有支援的話，那像 octotree 這類的 extension developer 就不用自己塞 html進 webpage了。</description>
    </item>
    
    <item>
      <title>PhantomJs and puppeteer</title>
      <link>https://hugo.balduran.cc/post/phantomjs-and-puppeteer/</link>
      <pubDate>Wed, 25 Oct 2017 17:59:00 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/phantomjs-and-puppeteer/</guid>
      <description>PhantomJs 一度是唯一的 headless browser，意思是他是可以用程式操控的瀏覽器，舉凡定時對網站做screenshot，或是檢查 html裡面某些內容，都可以透過程式操作 PhantomJs做到。
在軟體開發的過程中，只要是 html+js+css的專案，需要做 Unit Test的時候，都可以使用這個「看不見」的瀏覽器去執行，讓自動化的流程更順利。
不過我最近在寫的程式用到了 ES6 的語法，PhantomJS在讀取這部分程式的時候就噴 error了，正尋找解法的時候，發現 PhantomJs已經停止新功能的開發，主要開發者 Vitaly Slobodin 發了一篇聲明說明，因為 Headless Chrome推出，PhantomJs也算功成身退了。
Headless Chrome a.k.a puppeteer 由 Google 維護，當然能獲得的資源更多，支援也會更全面，在自動化網頁測試的領域可以直接使用 puppeteer。</description>
    </item>
    
    <item>
      <title>different way to install chrome extension</title>
      <link>https://hugo.balduran.cc/post/different-way-to-install-chrome-extension/</link>
      <pubDate>Mon, 30 May 2016 08:43:54 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/different-way-to-install-chrome-extension/</guid>
      <description>##安裝 chrome extension 的幾種方法
一般的使用者都會是直接連到 Chrome Web Store，搜尋特定 extension 然後安裝。
還有其他種方式適用其他情境。
 inline JS  可以直接使用 js trigger chrome 安裝 extension，適合用在 promotion page上，user 不用轉換頁面，同時埋入 analytics code可以分析轉換率。
chrome.webstore.install(url, successCallback, failureCallback) 對於 JS developer 應該不陌生，不贅述。
preferences JSON file  Mac OS 和 Linux適用，如果 extension 經由單機軟體散佈，那就需要用這個方法。假設要安裝的extension ID 是 aabbccddee，那麼在 ~USERNAME/Library/Application Support/Google/Chrome/External Extensions/ 或 /usr/share/google-chrome/extensions/  寫入一個 aabbccddee.json，裡面內容寫明 external_update_url，在 chrome 下次啟動的時候，會跳出一個小 popup windows問你要不要啟動這個 extension。
Windows registry  Windows上也有類似的方法，不過寫入的地方是 windows registry，需要用 C++ 之類的語言寫入 registry key。在 HKEY_LOCAL_MACHINE\Software\Google\Chrome\Extensions下開一個 new key，key name 就是 aabbccddee (extension ID)，在這個 key 之下也需要指定 update_url，同樣地，chrome每次啟動的時候就會掃這些 metadata，然後試著安裝或更新 extension。</description>
    </item>
    
  </channel>
</rss>