<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>programming on 說故事給你聽</title>
    <link>https://hugo.balduran.cc/tags/programming/</link>
    <description>Recent content in programming on 說故事給你聽</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 18 Jun 2017 23:32:30 +0000</lastBuildDate>
    
	<atom:link href="https://hugo.balduran.cc/tags/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GPG with git</title>
      <link>https://hugo.balduran.cc/post/gpg-with-git/</link>
      <pubDate>Sun, 18 Jun 2017 23:32:30 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/gpg-with-git/</guid>
      <description>sign code commit with gpg 需要以下步驟。
 安裝 GPG command line 產生 GPG key export GPG public key 在github上設定public key commit and sign  安裝 GPG 可以在 GnuPG 下載安裝，或是用homebrew 執行 brew install gpg
近來也有一個服務，keybase.io 在做 pub/private key 的管理，也可以用它來產生 key
產生 GPG gpg --gen-key 用 command line 做法
或是用 GPG keychain 產生，背後原理都一樣。
export 命令列輸入 gpg --list-secret-keys --keyid-format LONG，如果只輸入 gpg --list-secret-keys，結果沒有顯示 keyid的話，請用 gpg2
gpg --armor --export ==keyid== 可以得到 public key，一長串的字元
-----BEGIN PGP PUBLIC KEY BLOCK----- ABCDE ABCDE ABCDE ABCDE ABCDE -----END PGP PUBLIC KEY BLOCK----- github setting 在github的帳號設定下，貼入以上的 public key string</description>
    </item>
    
    <item>
      <title>php codes analyze tools</title>
      <link>https://hugo.balduran.cc/post/php-codes-analyze-tools/</link>
      <pubDate>Tue, 20 Sep 2016 01:41:15 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/php-codes-analyze-tools/</guid>
      <description>PHP 程式檢測工具
 php -l xxx.php 最簡單，僅檢查 syntax PHPSA phar或composer安裝，靜態檢查工具 PHP_CodeSniffer phpcs，曾經存在過 PHPMD 一樣 phar或composer安裝，仿自 java 的 PMD  </description>
    </item>
    
    <item>
      <title>define require include and env variable in PHP</title>
      <link>https://hugo.balduran.cc/post/define-require-include-and-env-variable-in-php/</link>
      <pubDate>Fri, 22 Apr 2016 02:10:54 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/define-require-include-and-env-variable-in-php/</guid>
      <description>Env variable 如果是變數，且是敏感資料，不能 commit 進 git (version control)，那請用 envronment variable，最好舉的例子就是 DB password。
在 shell 裡 export BD_PASSWD=&amp;quot;Passw0rd!，設定好環境變數，
php 裡可以用
 $_ENV 讀取。 getenv function取的。  define 如果是固定的字串，例如 PATH、SRC_PATH、INC_PATH，這些是固定內容的常數那就使用 define。
 const FOO=&#39;BAR&#39;; define(&#39;FOO&#39;, &#39;BAR&#39;);  程式原始碼或是一些include files可以放在一個共通的目錄，這時候 define SRC_PATH 就很適合。
常見的組合是用 define 從環境變數設定值。 define(&#39;DB_PASSWD&#39;, getenv(&#39;APP_DB_PASSWD&#39;));
require and include require 是用來引入(include)其他的 php檔案，如果引入失敗，會產生 FATAL error，include 則只是產生 warning。
require 也會先讀取 required file 並執行，include 則是單純把檔案內容引入而已，所以有時候會看到 if/else 配合 include 使用，動態載入 某些程式(一組的變數等等)，至於使用第三人寫的library，那就使用 require
有時候會看到 require($config.php);，首先 require 是 statement，不需要把它當成 function，第二則是不要 require 變數。</description>
    </item>
    
    <item>
      <title>bash_profile and bashrc</title>
      <link>https://hugo.balduran.cc/post/bash_profile-and-bashrc/</link>
      <pubDate>Tue, 19 Apr 2016 04:10:08 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/bash_profile-and-bashrc/</guid>
      <description>##bash_profile 和 bashrc 的差別
對很多程式人員來說，剛接觸到 Linux (or Mac)，打開 commandline，第一個學的就是 bash(shell)，也往往會 copy 別人的 bashrc來使用。
但不多人知道 bashrc and bash_profile 的差別。
GNU 上的 Bash manual 倒是說得很清楚，差別就在於 interactive shells。
##interactive shells 最簡單的判別方式就是，你敲入一個指令，然後終端機回給你結果，這個時候你就是處在一個 interactive shells。這時候輸入 echo $-，執行結果有 i 代表目前正在一個 interactive shells。
##non-interactive shells 那什麼是 non-interactive shells ?? shell script 在執行的時候，就是一個 non-interactive shells，這時shell script 處理邏輯並依序執行完，$-變數不會有i
當 bash 是以 interactive login shells 執行的時候，也就是最普遍的 ssh hostname的時候，他會依序讀取
 /etc/profile ~/.bash_profile ~/.bash_login ~/.profile，  .profile檔是一開始 sh 的命名，.bash_profile 是為了相容又有所區別
如果已經登入一台機器了，這時候再打一次 bash，這時候還是 interactive shells，但這時已經不是 login shell(不用打密碼了這次)，這時候讀取的設定檔就是</description>
    </item>
    
    <item>
      <title>cross domain request by CORS</title>
      <link>https://hugo.balduran.cc/post/cross-domain-request-by-cors/</link>
      <pubDate>Tue, 20 Oct 2015 05:21:06 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/cross-domain-request-by-cors/</guid>
      <description>#same origin 限制 Same-origin policy1是在瀏覽器上用 javascript 發動 request的時候，要求所在頁面與 requested resource需要是同個 domain，因為安全性的因素，做 ajax call 或是拉 webfont 的時候，只能向自家伺服器請求，也加深了對於應用程式開發的限制。
CORS2 則是解決 cross domain 的方法之一，需要將 server/client 都設定好才會成功。
CORS 中文翻作跨來源資源共享，直接叫 cross domain 比較乾脆，現代的瀏覽器內建的 XMLHttpRequest 都支援，除了 js script 要寫好之外，還需要額外設定伺服器。
基本順序如下
 JS 發出 cross-domain XHR server 收到 request 檢查 header and 自身設定 符合 cors 設定，回傳結果，如果設定不對，request 失敗是常有的事。  client side 發送端 發送 request 的時候，會設定 header裡的
 Origin Access-Control-Request-Headers (optional) Access-Control-Request-Method(optional)  POST 的 contentType and dataType 很重要</description>
    </item>
    
    <item>
      <title>doReturn and thenReturn in Mockito</title>
      <link>https://hugo.balduran.cc/post/doreturn-and-thenreturn-in-mockito/</link>
      <pubDate>Tue, 20 Oct 2015 04:38:36 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/doreturn-and-thenreturn-in-mockito/</guid>
      <description>用 Mockito 寫 unit test 的時候，一開始分不清楚 doReturn 和 thenReturn 的差別，基本上是一樣的，都是在做 stub。
但有一些例外。
 thenReturn 不能用來 stub void method spy 不能搭配 thenReturn stub same method 多次不能用 thenReturn doReturn 在編譯期間不做 return value 的型別檢查，thenReturn 會做 type check thenReturn 會先去執行 stub 的 method，然後改寫掉 return value，如果 method 裡有些變數沒有 mock ，極可能會 null pointer exception  總結，只要使用 doReturn, doThrow , doAnswer  就會，會單純一點。
Btw, @Mock 可以簡化一些 code</description>
    </item>
    
    <item>
      <title>洗撲克牌（亂數排列）</title>
      <link>https://hugo.balduran.cc/post/e6b497e692b2e5858be7898cefbc88e4ba82e695b8e68e92e58897efbc89/</link>
      <pubDate>Tue, 14 Oct 2008 17:07:36 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/e6b497e692b2e5858be7898cefbc88e4ba82e695b8e68e92e58897efbc89/</guid>
      <description>先看良葛格的洗撲克牌（亂數排列）。
 以1～52的亂數排列為例好了，可以將陣列先依序由1到52填入，然後使用一個迴圈走訪陣列，並隨機產生1～52的亂數，將產生的亂數當作索引取出陣列值，並與目前陣列走訪到的值相交換，如此就不用擔心亂數重複的問題了，陣列走訪完畢後，所有的數字也就重新排列了。
 簡言之
foreach $i (array){
$j = rand()
swap($i,$j)
}
但是這樣並不是正確的亂數排列方式，以大小為三的陣列為例，3! = 6，有六種排列變化方式，但是用這個方法得出的排列數卻是 3x3x3 = 27，而 27/6 無法整除，很明顯的不會平均分布，因此，用這種算法得到的排列並不是亂數排列。
真要做到亂數，迴圈數一樣是陣列大小，但是每 swap 一次，就要把一個元素剔除，再對剩下的陣列作重複的動作，這樣才是符合階層數的亂數排列。
這是一個很容易犯的小錯誤。</description>
    </item>
    
    <item>
      <title>2008 Open Hack Day in TW</title>
      <link>https://hugo.balduran.cc/post/2008-open-hack-day-in-tw/</link>
      <pubDate>Tue, 12 Aug 2008 18:46:10 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/2008-open-hack-day-in-tw/</guid>
      <description>台灣雅虎奇摩聚辦 Open Hack Day，就在九月20的周末，方式很硬，四十個隊伍在一天內要構築出成品競賽，完全不是講座纇的輕鬆型式，想參加，還得要找隊友才行。
我對廣告詞「讓 Hack girl與無名美少女xxxxxx」有點感冒。</description>
    </item>
    
  </channel>
</rss>