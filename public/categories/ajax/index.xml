<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ajax on 說故事給你聽</title>
    <link>https://hugo.balduran.cc/categories/ajax/</link>
    <description>Recent content in ajax on 說故事給你聽</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Oct 2015 05:21:06 +0000</lastBuildDate>
    
	<atom:link href="https://hugo.balduran.cc/categories/ajax/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>cross domain request by CORS</title>
      <link>https://hugo.balduran.cc/post/cross-domain-request-by-cors/</link>
      <pubDate>Tue, 20 Oct 2015 05:21:06 +0000</pubDate>
      
      <guid>https://hugo.balduran.cc/post/cross-domain-request-by-cors/</guid>
      <description>#same origin 限制 Same-origin policy1是在瀏覽器上用 javascript 發動 request的時候，要求所在頁面與 requested resource需要是同個 domain，因為安全性的因素，做 ajax call 或是拉 webfont 的時候，只能向自家伺服器請求，也加深了對於應用程式開發的限制。
CORS2 則是解決 cross domain 的方法之一，需要將 server/client 都設定好才會成功。
CORS 中文翻作跨來源資源共享，直接叫 cross domain 比較乾脆，現代的瀏覽器內建的 XMLHttpRequest 都支援，除了 js script 要寫好之外，還需要額外設定伺服器。
基本順序如下
 JS 發出 cross-domain XHR server 收到 request 檢查 header and 自身設定 符合 cors 設定，回傳結果，如果設定不對，request 失敗是常有的事。  client side 發送端 發送 request 的時候，會設定 header裡的
 Origin Access-Control-Request-Headers (optional) Access-Control-Request-Method(optional)  POST 的 contentType and dataType 很重要</description>
    </item>
    
  </channel>
</rss>